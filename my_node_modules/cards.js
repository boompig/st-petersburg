function Card (name, cost, coinYield, pointYield, type, indexInType, kwargs) {
    this.name = name;
    this.cost = cost;
    this.pointYield = pointYield;
    this.coinYield = coinYield;
    this.type = type;
    this.index = indexInType;

    // used for special cards like Potjomkin's Village
    this.upgradeCost = this.cost;
    this.upgradeType = this.type;

    if (kwargs) {
        for (var property in kwargs) {
            if (this.hasOwnProperty(property) && kwargs.hasOwnProperty(property)) {
                //console.log("setting " + property + " for " + this.name);
                this[property] = kwargs[property];
            }
        }
    }
}

Card.locations = {
    HAND: 1,
    UPPER_BOARD: 2,
    LOWER_BOARD: 3,
};

Card.types = {
    WORKER: 1,
    BUILDING: 2,
    ARISTOCRAT: 3,
    UPGRADE: 4
};

Card.prototype.canUpgradeTo = function (upgradeCard) {
    // TODO for now does not read worker classes
    return upgradeCard.type === Card.types.UPGRADE &&
        this.upgradeType === upgradeCard.upgradeType;
};

Card.prototype.hash = function () {
    // there are no more than 99 cards of each type
    return 100 * this.type + this.index;
};

Card.prototype.getCost = function (location) {
    if (location === Card.locations.LOWER_BOARD) {
        return Math.max(this.cost - 1, 1);
    } else {
        return this.cost;
    }
};

Card.prototype.canEvalNow = function (phase) {
    return this.upgradeType === phase;
};

// just a list of all the cards, for easy access
var cards = {
    // workers
    lumberjack: new Card("Lumberjack", 3, 3, 0, Card.types.WORKER, 1),
    gold_miner: new Card("Gold Miner", 4, 3, 0, Card.types.WORKER, 2),
    shepherd: new Card("Shepherd", 5, 3, 0, Card.types.WORKER, 3),
    fur_trapper: new Card("Fur Trapper", 6, 3, 0, Card.types.WORKER, 4),
    ship_builder: new Card("Ship Builder", 7, 3, 0, Card.types.WORKER, 5),
    czar_and_carpenter: new Card("Czar and Carpenter", 8, 3, 0, Card.types.WORKER, 6),
    // buildings
    market: new Card("Market", 5, 0, 1, Card.types.BUILDING, 1),
    customs_house: new Card("Customs House", 8, 0, 2, Card.types.BUILDING, 2),
    firehouse: new Card("Firehouse", 11, 0, 3, Card.types.BUILDING, 3),
    hospital: new Card("Hospital", 14, 0, 4, Card.types.BUILDING, 4),
    library: new Card("Library", 17, 0, 5, Card.types.BUILDING, 5),
    theatre: new Card("Theatre", 20, 0, 6, Card.types.BUILDING, 6),
    academy: new Card("Academy", 23, 0, 7, Card.types.BUILDING, 7),
    // aristocrats
    author: new Card("Author", 4, 1, 0, Card.types.ARISTOCRAT, 1),
    administrator: new Card("Administrator", 7, 2, 0, Card.types.ARISTOCRAT, 2),
    warehouse_manager: new Card("Warehouse Manager", 10, 3, 0, Card.types.ARISTOCRAT, 3),
    // upgrades to aristocrats
    pope: new Card("Pope", 6, 1, 1, Card.types.UPGRADE, 1,
        {"upgradeType": Card.types.ARISTOCRAT}),
};

exports.Card = Card;
exports.cards = cards;
