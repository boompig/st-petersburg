import { Card } from "../js/cards.js";

/**
 *
 * @param {Move.actions} action
 * @param {Card.locations} location
 * @param {Card} card
 * @param {Card | null} baseCard
 */
export function Move (action, location, card, baseCard) {
    this.action = action;
    this.location = location;
    this.card = card;
    // this is only set for the UPGRADE action
    this.baseCard = baseCard || null;
}

Move.actions = Object.freeze({
    PASS: 1,
    BUY: 2,
    PUT_IN_HAND: 3,
    UPGRADE: 4
});

/**
 * @returns {String}
 */
Move.prototype.getActionName = function () {
    switch (this.action) {
    case Move.actions.PASS:
        return "PASS";
    case Move.actions.BUY:
        return "BUY";
    case Move.actions.PUT_IN_HAND:
        return "PUT_IN_HAND";
    case Move.actions.UPGRADE:
        return "UPGRADE";
    }
};

/**
 * @returns {String}
 */
Move.prototype.getLocationName = function () {
    switch (this.location) {
    case Card.locations.HAND:
        return "HAND";
    case Card.locations.UPPER_BOARD:
        return "UPPER_BOARD";
    case Card.locations.LOWER_BOARD:
        return "LOWER_BOARD";
    }
};

/**
 * @returns {String}
 */
Move.prototype.toString = function () {
    if (this.baseCard) {
        return "Move (action=" + this.getActionName() +
            ", location=" + this.getLocationName() +
            ", card=" + this.card.name +
            ", baseCard=" + this.baseCard.name + ")";
    } else if (this.card && this.location) {
        return "Move (action=" + this.getActionName() +
            ", location=" + this.getLocationName() +
            ", card=" + this.card.name + ")";
    } else {
        return "Move(action=" + this.getActionName() + ")";
    }
};

Move.prototype.equals = function (otherMove) {
    return this.action === otherMove.action &&
            this.location === otherMove.location &&
            ((this.card === null && otherMove.card === null) ||
             (this.card.name === otherMove.card.name)) &&
            ((this.baseCard === null && otherMove.baseCard === null) ||
             (this.baseCard === otherMove.baseCard));
};
