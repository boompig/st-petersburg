var require = require || null;
var exports = exports || {};
if (require) {
    // node.js imports
    var Card = require("./cards.js").Card;
}

/**
 * A player, as represented in a normal St. Petersburg game
 * No custom modifications have been made to distinguish between AI and human
 */
function Player (name, token, isHuman) {
    // game state stuff
    this.hand = [];
    this.cards = [];
    this.points = 0;
    // start with 25 money
    this.money = 25;
    this.token = token || null;

    // display stuff
    this.name = name;
    this.isHuman = isHuman;
}

/**
 * TODO very inefficient, try something else
 */
Player.prototype.hasCard = function (cardName) {
    var matchingCards = this.cards.filter(function (card) {
        return card.name === cardName;
    });
    return matchingCards.length > 0;
};

/**
 * Return true iff this player has a card which makes the given card cheaper to buy
 * By this it means special worker cards
 */
Player.prototype.hasDiscountForCard = function (card) {
    if (card.type === Card.types.ARISTOCRAT || (card.type === Card.types.UPGRADE && card.upgradeType === Card.types.ARISTOCRAT)) {
        return this.hasCard("Gold Smelter");
    } else if (card.type === Card.types.BUILDING || (card.type === Card.types.UPGRADE && card.upgradeType === Card.types.BUILDING)) {
        return this.hasCard("Carpenter");
    } else {
        return false;
    }
};

Player.prototype.clone = function () {
    var p = new Player();
    p.hand = this.hand.slice();
    p.cards = this.cards.slice();
    p.points = this.points;
    p.money = this.money;
    return p;
};

/**
 * Compute the cost of the card
 * TODO: cost is not properly calculated for upgrades, and doesn't use discount cards
 */
Player.prototype.getCardCost = function (card, location) {
    var cost = card.getCost(location);
    for (var i = 0; i < this.cards.length; i++) {
        if (this.cards[i].type === card.type && this.cards[i].index === card.index) {
            cost--;
        }
    }
    return Math.max(cost, 1);
};

Player.prototype.canAffordCard = function (card, location) {
    return this.getCardCost(card, location) <= this.money;
};

Player.prototype.getMaxHandSize = function () {
    if (this.hasCard("Warehouse")) {
        return 4;
    } else {
        return 3;
    }
};

Player.prototype.canPutCardInHand = function () {
    return this.hand.length < this.getMaxHandSize();
};

Player.prototype.buyCard = function (card, location) {
    if (this.canAffordCard(card, location)) {
        // must calculate cost before adding to list of cards
        this.money -= this.getCardCost(card, location);
        this.cards.push(card);
        return true;
    } else {
        return false;
    }
};

Player.prototype.putCardInHand = function (card) {
    if (this.canPutCardInHand()) {
        this.hand.push(card);
        return true;
    } else {
        return false;
    }
};

/**
 * Play the given card from the player's hand
 * Return true if successful, false otherwise
 * On success, remove the card from player's hand
 */
Player.prototype.playCardFromHand = function (card) {
    var i = this.hand.indexOf(card);
    if (i >= 0) {
        var result = this.buyCard(card, Card.locations.HAND);
        if (result) {
            this.hand.splice(i, 1);
        }
    } else {
        return false;
    }
};

exports.Player = Player;
