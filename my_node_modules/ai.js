var require = require || null;
var exports = exports || {};
if (require) {
    // node.js imports
    var Card = require("./cards.js").Card;
    var Player = require("./player.js").Player;
}

/**
 * Helpful polyfills
 */

Array.prototype.min = function () {
    return Math.min.apply(null, this);
};


/**
 * The game state which I plan to pass to the AI
 */
function State (decks, upperBoard, lowerBoard, phase, player) {
    // game state
    this.decks = decks;

    this.upperBoard = upperBoard;
    this.lowerBoard = lowerBoard;

    this.phase = phase;

    // player state
    this.player = player;
};

State.prototype.getPhaseName = function () {
    switch (this.phase) {
        case Card.types.WORKER:
            return "WORKER";
        case Card.types.BUILDING:
            return "BUILDING";
        case Card.types.ARISTOCRAT:
            return "ARISTOCRAT";
        case Card.types.UPGRADE:
            return "UPGRADE";
    }
};

State.prototype.toString = function () {
    var cardNames = [];
    for (var i = 0; i < this.player.cards.length; i++) {
        cardNames.push(this.player.cards[i].name);
    }
    var handNames = [];
    for (var i = 0; i < this.player.hand.length; i++) {
        handNames.push(this.player.hand[i].name);
    }

    return "State (phase=" + this.getPhaseName() + ", " +
        "decks=[" + this.decks.join(", ") + "], " +
        "hand=[" + handNames.join(", ") + "], " +
        "cards=[" + cardNames.join(", ") + "])";
};

State.phases = [
    Card.types.WORKER,
    Card.types.BUILDING,
    Card.types.ARISTOCRAT,
    Card.types.UPGRADE
];

State.prototype.clone = function () {
    var deck = this.decks.slice();
    var lowerBoard = this.lowerBoard.slice();
    var upperBoard = this.upperBoard.slice();
    var player = this.player.clone();
    var phase = this.phase;
    return new State(deck, upperBoard, lowerBoard, phase, player);
};

State.prototype.hasNextPhase = function () {
    return this.phase !== Card.types.UPGRADE || this.hasNextRound();
};

/**
 * Return true iff state can deal a next round
 */
State.prototype.hasNextRound = function () {
    return this.decks.min() > 0;
};

function Move (action, location, card) {
    this.action = action;
    this.location = location;
    this.card = card;
};

Move.actions = {
    PASS: 1,
    BUY: 2,
    PUT_IN_HAND: 3
};

Move.prototype.getActionName = function () {
    switch (this.action) {
        case Move.actions.PASS:
            return "PASS";
        case Move.actions.BUY:
            return "BUY";
        case Move.actions.PUT_IN_HAND:
            return "PUT_IN_HAND";
    }
};

Move.prototype.getLocationName = function () {
    switch (this.location) {
        case Card.locations.HAND:
            return "HAND";
        case Card.locations.UPPER_BOARD:
            return "UPPER_BOARD";
        case Card.locations.LOWER_BOARD:
            return "LOWER_BOARD";
    }
};

Move.prototype.toString = function () {
    if (this.card && this.location) {
        return "Move (action=" + this.getActionName() + 
            ", location=" + this.getLocationName() +
            ", card=" + this.card.name + ")";
    } else {
        return "Move (action=" + this.getActionName() + ")";
    }
};

Move.prototype.equals = function (otherMove) {
    return this.action === otherMove.action &&
            this.location === otherMove.location &&
            ((this.card === null && otherMove.card === null) ||
             (this.card.name === otherMove.card.name));
};

var AI = {};

/**
 * Generate the state in the next phase if player passes in this phase
 * TODO for now do these things:
 *      - take 8 cards off from next deck
 *      - assume upper board now blank
 *      - score cards from this phase
 *      - move to next phase
 *      - move cards from upper board to lower board
 *      - discard lower board
 */
AI.generateNextPhaseState = function (state) {
    var newState = state.clone();
    var player = newState.player;
    var i, card;

    // take 8 cards off next deck
    var currentDeckIndex = State.phases.indexOf(state.phase);
    var nextDeckIndex = (currentDeckIndex + 1) % State.phases.length;
    newState.decks[nextDeckIndex] -= Math.min(8, newState.decks[nextDeckIndex])

    // eval state by adding points and money for each card in player's cards
    // which corresponds to current state
    for (i = 0; i < player.cards.length; i++) {
        card = player.cards[i];
        if (card.canEvalNow(state.phase)) {
            player.points += card.pointYield;
            player.money += card.coinYield;
        }
    }

    // put the whole upper board onto the lower board
    newState.lowerBoard = newState.upperBoard;
    // empty the upper board
    newState.upperBoard = [];

    // move to next phase
    newState.phase = State.phases[nextDeckIndex];

    return newState;
};

/**
 * Generate successors is a generator over objects of the following form:
 *      { state: <State>, move: <Move> }
 */
AI.generateSuccessors = function genSuccessors (state) {
    var player = state.player;
    var successors = [];
    var i, card, newState;

    if (state.hasNextPhase()) {
        var nextPhaseState = AI.generateNextPhaseState(state);
        // pass and go to next round
        successors.push({
            "state": nextPhaseState,
            "move": new Move(Move.actions.PASS, null, null)
        });
    }

    for (i = 0; i < player.hand.length; i++) {
        card = player.hand[i];
        // try buy card in hand
        if (player.canAffordCard(card, Card.locations.HAND)) {
            newState = state.clone();
            newState.player.playCardFromHand(card);
            successors.push({
                "state": newState,
                "move": new Move(Move.actions.BUY, Card.locations.HAND, card)
            });
        }
    }

    for (i = 0; i < state.upperBoard.length; i++) {
        card = state.upperBoard[i];
        // try buy card
        if (player.canAffordCard(card, Card.locations.UPPER_BOARD)) {
            newState = state.clone();
            newState.upperBoard.splice(i, 1);
            newState.player.buyCard(card, Card.locations.UPPER_BOARD);
            successors.push({
                "state": newState,
                "move": new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, card)
            });
        }
        // try take card into hand
        if (player.canPutCardInHand()) {
            newState = state.clone();
            newState.upperBoard.splice(i, 1);
            newState.player.putCardInHand(card);
            successors.push({
                "state": newState,
                "move": new Move(Move.actions.PUT_IN_HAND, Card.locations.UPPER_BOARD, card)
            });
        }
    }

    for (i = 0; i < state.lowerBoard.length; i++) {
        card = state.lowerBoard[i];
        // try buy card
        if (player.canAffordCard(card, Card.locations.LOWER_BOARD)) {
            newState = state.clone();
            newState.lowerBoard.splice(i, 1);
            newState.player.buyCard(card, Card.locations.LOWER_BOARD);
            successors.push({
                "state": newState,
                "move": new Move(Move.actions.BUY, Card.locations.LOWER_BOARD, card)
            });
        }
        // try take card into hand
        if (player.canPutCardInHand()) {
            newState = state.clone();
            newState.lowerBoard.splice(i, 1);
            newState.player.putCardInHand(card);
            successors.push({
                "state": newState,
                "move": new Move(Move.actions.PUT_IN_HAND, Card.locations.LOWER_BOARD, card)
            });
        }
    }
    return successors;
};

AI.numTurnsLeftInGame = function (state) {
    var minDeck = state.decks.min();
    return Math.ceil(minDeck / 8);
};

AI.nextPhase = function (phase) {
    var idx = State.phases.indexOf(phase);
    return State.phases[(idx + 1) % State.phases.length];
};

AI.estimateEvalState = function (state) {
    var player = state.player;
    if (player.cards.length === 0 && player.hand.length === 0 &&
        state.upperBoard.length === 0 && state.lowerBoard.length === 0) {
        return player.money / 10;
    } else if (state.upperBoard.length === 0 && state.lowerBoard.length === 0) {
        var currentPoints = player.points;
        // add up the points that I have in
        var potentialPoints = 0;
        for (var i = 0; i < player.hand.length; i++) {
            potentialPoints += player.hand[i].pointYield;
        }
        for (var i = 0; i < player.cards.length; i++) {
            potentialPoints += player.cards[i].pointYield;
        }
        potentialPoints *= (AI.numTurnsLeftInGame(state) + 1);
        return currentPoints + potentialPoints + player.money / 10;
    } else {
        return 5000;
    }
};

AI.isTerminalState = function (state) {
    return (! state.hasNextPhase());
};

/**
 * Return the number of points the player would get if the game ended right now
 * TODO for now do these things:
 *      - score all the phases which have not been scored
 *      - take off points for cards in hand
 *      - 1 full point for each 10 money (but just dividing by 10 to give bias to more money)
 * TODO does not count aristocrats
 */
AI.evalState = function (initialState) {
    var state = initialState;
    // evaluate all phases until upgrade
    while (state.phase !== Card.types.UPGRADE) {
        state = AI.generateNextPhaseState(state);
    }

    var player = state.player;
    var p = player.points;
    return p - (player.hand.length * 5) + (player.money / 10);
    //return p - (player.hand.length * 5);
};

AI.hashState = function (state) {
    var hash = [];
    // game state
    hash.push( state.decks.join(",") );
    hash.push( "T" + state.phase );

    // player state
    var player = state.player;
    // hash points
    hash.push( "P" + player.points );
    hash.push( "C" + player.money );
    var cardNames = [];
    for (var i = 0; i < player.cards.length; i++) {
        cardNames.push(player.cards[i].name);
        //cardNames.push(player.cards[i].hash());
    }
    cardNames.sort();
    hash.push( cardNames.join("") );
    var handNames = [];
    for (var i = 0; i < player.hand.length; i++) {
        handNames.push(player.hand[i].name);
        //handNames.push(player.hand[i].hash());
    }
    handNames.sort();
    hash.push( "H" + handNames.join("") );
    return hash.join("");
};

AI.BFS = function (startState) {
    "use strict";
    var open = [{ "state": startState, "moveList": [] }];
    var obj, moveList, state, newMoveList, score, hashState;
    var bestScore = 0;
    var bestMoveList = null;
    var visited = new Set();

    while (open.length > 0) {
        obj = open.splice(0, 1)[0];
        moveList = obj.moveList;
        state = obj.state;
        hashState = AI.hashState(state);

        if (visited.has(hashState)) {
            continue;
        } else {
            visited.add(hashState);
        }

        if (AI.isTerminalState(state)) {
            // stop
            score = AI.evalState(state);
            if (score > bestScore) {
                bestScore = score;
                bestMoveList = moveList;
            }
        } else if (AI.estimateEvalState(state) <= bestScore) {
            // you suck, don't generate successors
        } else {
            // good, expand the state into successors
            var successors = AI.generateSuccessors(state);
            for (var i = 0; i < successors.length; i++) {
                newMoveList = moveList.slice();
                newMoveList.push(successors[i].move);
                open.push({
                    "state": successors[i].state,
                    "moveList": newMoveList
                });
            }
        }
    }

    if (bestMoveList === null) {
        bestMoveList = [ new Move(Move.actions.PASS, null, null) ];
    }
    return {
        "score": bestScore,
        "move": bestMoveList[0],
        "moveList": bestMoveList,
        "numNodes": visited.length
    };
};

/**
 * Return the best move
 */
AI.analyze = function (state) {
    return AI.BFS(state);
};

exports.State = State;
exports.Player = Player;
exports.AI = AI;
exports.Move = Move;
