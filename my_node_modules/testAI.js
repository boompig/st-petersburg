// import the thing being tested
var app = require("./app.js");
var State = app.State;
var Player = app.Player;
var AI = app.AI;
var Move = app.Move;

var c = require("./cards.js");
var cards = c.cards;
var Card = c.Card;

/*** Testing the function getNumTurnsLeft ***/
exports.testGetNumTurnsLeftOneZero = function (test) {
    var decks = [5, 6, 4, 0];
    var state = new State(decks, [], []);
    test.strictEqual(AI.numTurnsLeftInGame(state), 0, "must be zero");
    test.done();
};

exports.testGetNumTurnsLeftAllZero = function (test) {
    var decks = [0, 0, 0, 0];
    var state = new State(decks, [], []);
    test.strictEqual(AI.numTurnsLeftInGame(state), 0, "must be zero");
    test.done();
};

exports.testGetNumTurnsLeftOne = function (test) {
    var decks = [1, 2, 3, 4];
    var state = new State(decks, [], []);
    test.strictEqual(AI.numTurnsLeftInGame(state), 1, "must be 1");
    test.done();
};

/******** Testing the analyzer function ***/
exports.testAnalyzeNothing = function (test) {
    var player = new Player();
    var decks = [0, 0, 0, 0];
    var state = new State(decks, [], [], player);
    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.PASS, null, null);

    test.strictEqual(obj.score, 0, "0 score on empty state");
    test.ok(obj.move.equals( correctBestMove ), "pass when nothing there");
    test.done();
};

exports.testSingleImpossibleMove = function (test) {
    var player = new Player();
    var upperBoard = [cards.hospital];
    var decks = [0, 0, 0, 0];
    var state = new State(decks, upperBoard, [], player);
    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.PASS, null, null);

    test.strictEqual(obj.score, 0, "0 score on empty state");
    test.ok(obj.move.equals( correctBestMove ), "pass when no valid moves");
    test.done();
};

exports.testSinglePossibleMove = function (test) {
    var player = new Player();
    var upperBoard = [cards.market];
    player.coins = cards.market.cost;
    var decks = [0, 0, 0, 0];
    var state = new State(decks, upperBoard, [], player);
    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.market);

    test.strictEqual(obj.score, cards.market.pointYield, "market point yield");
    test.ok(obj.move.equals( correctBestMove ), "buy market move");
    test.done();
};

exports.testChooseBetweenTwoCards = function (test) {
    var player = new Player();
    var upperBoard = [cards.market, cards.customs_house];
    player.coins = cards.market.cost * 2;
    var decks = [0, 0, 0, 0];
    var state = new State(decks, upperBoard, [], player);
    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.customs_house);

    test.strictEqual(obj.score, cards.customs_house.pointYield, "grab customs house");
    test.ok(obj.move.equals( correctBestMove ), "buy customs house move");
    test.done();
};

exports.testWaitUntilLowerBoard = function (test) {
    var player = new Player();
    var upperBoard = [cards.market];
    player.coins = cards.market.cost - 1;
    var decks = [8, 8, 8, 8];
    var state = new State(decks, upperBoard, [], player);
    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.PASS, null, null);

    test.strictEqual(obj.score, cards.market.pointYield, "pass then buy - points");
    test.ok(obj.move.equals( correctBestMove ), "pass then buy - action");
    test.done();
};

exports.testUpperAndLowerBoard = function (test) {
    var player = new Player();
    var upperBoard = [cards.market, cards.customs_house];
    player.coins = cards.customs_house.cost + cards.market.cost - 1;
    var decks = [8, 8, 8, 8];
    var state = new State(decks, upperBoard, [], player);
    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.customs_house);

    test.strictEqual(obj.score, 2 * cards.customs_house.pointYield + cards.market.pointYield, "buy then buy - points");
    test.ok(obj.move.equals( correctBestMove ), "buy then buy - action");
    test.done();
};
