// import the thing being tested
var app = require("./ai.js");
var State = app.State;
var Player = app.Player;
var AI = app.AI;
var Move = app.Move;

var c = require("./cards.js");
var cards = c.cards;
var Card = c.Card;

/*** Testing the function getNumTurnsLeft ***/
exports.testGetNumTurnsLeftOneZero = function (test) {
    var decks = [5, 6, 4, 0];
    var state = new State(decks, [], [], Card.types.BUILDING);
    test.strictEqual(AI.numTurnsLeftInGame(state), 0, "must be zero");
    test.done();
};

exports.testGetNumTurnsLeftAllZero = function (test) {
    var decks = [0, 0, 0, 0];
    var state = new State(decks, [], [], Card.types.BUILDING);
    test.strictEqual(AI.numTurnsLeftInGame(state), 0, "must be zero");
    test.done();
};

exports.testGetNumTurnsLeftOne = function (test) {
    var decks = [1, 2, 3, 4];
    var state = new State(decks, [], [], Card.types.BUILDING);
    test.strictEqual(AI.numTurnsLeftInGame(state), 1, "must be 1");
    test.done();
};

/******** Testing the analyzer function ***/
exports.testAnalyzeNothing = function (test) {
    var player = new Player();
    player.money = 0;

    var decks = [0, 0, 0, 0];
    var state = new State(decks, [], [], Card.types.BUILDING, player);
    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.PASS, null, null);

    test.strictEqual(obj.score, 0, "0 score on empty state");
    test.ok(obj.move.equals( correctBestMove ), "pass when nothing there");
    test.done();
};

/**
 * Give the player no money, and the only card available costs money...
 */
exports.testSingleImpossibleMove = function (test) {
    var player = new Player();
    player.money = 0;

    var upperBoard = [cards.hospital];
    var decks = [0, 0, 0, 0];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.PASS, null, null);

    test.strictEqual(obj.score, 0, "0 score on empty state");
    test.ok(obj.move.equals( correctBestMove ), "pass when no valid moves");
    test.done();
};

/**
 * Player can afford to buy only card in upper board
 */
exports.testSinglePossibleMove = function (test) {
    var player = new Player();
    player.money = cards.market.cost;

    var upperBoard = [cards.market];
    var decks = [0, 0, 0, 0];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.market);

    test.ok(obj.score >= cards.market.pointYield && obj.score < cards.market.pointYield + 1, "market point yield");
    test.ok(obj.move.equals( correctBestMove ), "buy market move");
    test.done();
};

/**
 * Player must choose between two cards, one of which will give more points
 * Player can afford both cards
 */
exports.testChooseBetweenTwoCards = function (test) {
    var player = new Player();
    player.money = cards.market.cost * 2;

    var upperBoard = [cards.market, cards.customs_house];
    var decks = [0, 0, 0, 0];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.customs_house);

    test.ok(obj.score >= cards.customs_house.pointYield && obj.score < cards.customs_house.pointYield + 1, "buy customs house - points");
    test.ok(obj.move.equals( correctBestMove ), "buy customs house - move");
    test.done();
};

/**
 * Player must wait until card is available on a lower board in order to buy it
 * There are two rounds in this game
 */
exports.testWaitUntilLowerBoard = function (test) {
    var player = new Player();
    player.money = cards.market.cost - 1;

    var upperBoard = [cards.market];
    var decks = [9, 9, 9, 9];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.PASS, null, null);

    test.ok(obj.score >= cards.market.pointYield && obj.score < cards.market.pointYield + 1, "pass then buy - points");
    test.ok(obj.move.equals( correctBestMove ), "pass then buy - action");
    test.done();
};

/**
 * Player must choose which card to buy now and which to buy later
 */
exports.testUpperAndLowerBoard = function (test) {
    var player = new Player();
    player.money = cards.customs_house.cost + cards.market.cost - 1;

    var upperBoard = [cards.market, cards.customs_house];
    var decks = [9, 9, 9, 9];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.customs_house);
    var minScore = 2 * cards.customs_house.pointYield + cards.market.pointYield;
    //for (var i = 0; i < obj.moveList.length; i++)
        //console.log(obj.moveList[i].toString());

    test.ok(obj.score >= minScore && obj.score < minScore + 1, "buy low and high - points");
    test.ok(obj.move.equals( correctBestMove ), "buy low and high - action");
    test.done();
};

exports.testWaitWithIncome = function (test) {
    var player = new Player();
    player.cards = [cards.lumberjack, cards.shepherd];
    player.money = cards.market.cost;

    var upperBoard = [cards.market, cards.firehouse];
    var decks = [9, 9, 9, 9];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.PASS, null, null);
    var minScore = cards.firehouse.pointYield;

    test.ok(obj.score >= minScore && obj.score < minScore + 1 , "slow buy firehouse - points");
    test.ok(obj.move.equals( correctBestMove ), "slow buy firehouse - action");
    test.done();
};

exports.testAcademyWithIncomeTwoDeep = function (test) {
    var player = new Player();
    player.cards = [cards.lumberjack, cards.shepherd];
    player.money = 23;

    var upperBoard = [
        cards.market,
        cards.library,
        cards.academy,
    ];
    var decks = [9, 9, 9, 9];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.academy);
    var minScore = cards.academy.pointYield * 2 + cards.market.pointYield

    test.ok(obj.score >= minScore && obj.score < minScore + 1, "buy academy first - points");
    test.ok(correctBestMove.equals(obj.moveList[0]) ||
            correctBestMove.equals(obj.moveList[1]), "buy academy first - action");
    test.done();
};

exports.testAcademyWideTwoDeep = function (test) {
    var player = new Player();
    player.cards = [cards.lumberjack, cards.shepherd];
    player.money = 23;

    var upperBoard = [
        cards.market,
        cards.market,
        cards.customs_house,
        cards.customs_house,
        cards.firehouse,
        cards.library,
        cards.theatre,
        cards.academy,
    ];
    var decks = [9, 9, 9, 9];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.academy);
    var minScore = cards.academy.pointYield * 2 + cards.market.pointYield;

    test.ok(obj.score >= minScore && obj.score < minScore + 1,
            "buy academy first - points");
    test.ok(correctBestMove.equals(obj.moveList[0]) ||
            correctBestMove.equals(obj.moveList[1]), "buy academy first - action");
    test.done();
};

exports.testAcademyThreeDeep = function (test) {
    var player = new Player();
    player.cards = [cards.lumberjack, cards.shepherd];
    player.money = 23;

    var upperBoard = [
        cards.market,
        cards.market,
        cards.customs_house,
        cards.customs_house,
        cards.firehouse,
        cards.library,
        cards.theatre,
        cards.academy,
    ];
    var decks = [17, 17, 17, 17];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.academy);
    var minScore = cards.academy.pointYield * 3 + cards.firehouse.pointYield;
    //for (var i = 0; i < obj.moveList.length; i++)
        //console.log(obj.moveList[i].toString());

    test.ok(obj.score >= minScore && obj.score < minScore + 1,
            "buy academy first - points");
    test.ok(correctBestMove.equals(obj.moveList[0]) ||
            correctBestMove.equals(obj.moveList[1]) ||
            correctBestMove.equals(obj.moveList[2]), "buy academy first - action");
    test.done();
};

exports.testAcademyFourDeep = function (test) {
    var player = new Player();
    player.cards = [cards.lumberjack, cards.shepherd];
    player.money = 23;

    var upperBoard = [
        cards.market,
        cards.market,
        cards.customs_house,
        cards.firehouse,
        cards.library,
        cards.theatre,
        cards.academy,
    ];
    var decks = [25, 25, 25, 25];
    var state = new State(decks, upperBoard, [], Card.types.BUILDING, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD,
                                    cards.academy);
    var minScore = cards.academy.pointYield * 4 + cards.firehouse.pointYield * 2 + cards.market.pointYield;

    test.ok(obj.score >= minScore && obj.score < minScore + 1,
        "buy academy first - points");
    test.ok(correctBestMove.equals(obj.moveList[0]) ||
            correctBestMove.equals(obj.moveList[1]) ||
            correctBestMove.equals(obj.moveList[2]), "buy academy first - action");
    test.done();
};

/**
 * AI should only buy workers if net amt of money goes up
 * Therefore AI should buy 2 x lumberjack
 */
exports.testBuyGameEndWorkers = function (test) {
    var player = new Player();
    player.money = 25;

    var upperBoard = [
        cards.lumberjack,
        cards.lumberjack,
        cards.gold_miner,
        cards.shepherd,
        cards.fur_trapper,
        cards.fur_trapper,
        cards.ship_builder,
        cards.czar_and_carpenter
    ];
    var decks = [0, 0, 0, 0];
    var state = new State(decks, upperBoard, [], Card.types.WORKER, player);

    var obj = AI.analyze(state);
    var correctBestMove = new Move(Move.actions.BUY, Card.locations.UPPER_BOARD, cards.lumberjack);
    //for (var i = 0; i < obj.moveList.length; i++)
        //console.log(obj.moveList[i].toString());

    // 2 buys and 3 passes
    test.strictEqual(obj.moveList.length, 5, "buy 2 workers");
    test.ok(correctBestMove.equals(obj.moveList[0]) &&
            correctBestMove.equals(obj.moveList[1]), "buy both lumberjacks");
        test.done();
};
